##  poppler-action.h: glib interface to poppler
##  Copyright (C) 2004, Red Hat, Inc.
##
##  This program is free software; you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation; either version 2, or (at your option)
##  any later version.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License
##  along with this program; if not, write to the Free Software
##  Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.
##

import
  poppler

## *
##  PopplerActionType:
##  @POPPLER_ACTION_UNKNOWN: unknown action
##  @POPPLER_ACTION_NONE: no action specified
##  @POPPLER_ACTION_GOTO_DEST: go to destination
##  @POPPLER_ACTION_GOTO_REMOTE: go to destination in another document
##  @POPPLER_ACTION_LAUNCH: launch app (or open document)
##  @POPPLER_ACTION_URI: URI
##  @POPPLER_ACTION_NAMED: predefined action
##  @POPPLER_ACTION_MOVIE: play movies. Since 0.14
##  @POPPLER_ACTION_RENDITION: play multimedia content. Since 0.14
##  @POPPLER_ACTION_OCG_STATE: state of layer. Since 0.14
##  @POPPLER_ACTION_JAVASCRIPT: Javascript. Since 0.18
##  @POPPLER_ACTION_RESET_FORM: resets form. Since 0.90
##
##  Action types
##

type
  PopplerActionType* {.size: sizeof(cint).} = enum
    POPPLER_ACTION_UNKNOWN,   ##  unknown action
    POPPLER_ACTION_NONE,      ##  no action specified
    POPPLER_ACTION_GOTO_DEST, ##  go to destination
    POPPLER_ACTION_GOTO_REMOTE, ##  go to destination in new file
    POPPLER_ACTION_LAUNCH,    ##  launch app (or open document)
    POPPLER_ACTION_URI,       ##  URI
    POPPLER_ACTION_NAMED,     ##  named action
    POPPLER_ACTION_MOVIE,     ##  movie action
    POPPLER_ACTION_RENDITION, ##  rendition action
    POPPLER_ACTION_OCG_STATE, ##  Set-OCG-State action
    POPPLER_ACTION_JAVASCRIPT, ##  Javascript action
    POPPLER_ACTION_RESET_FORM ##  ResetForm action


## *
##  PopplerDestType:
##  @POPPLER_DEST_UNKNOWN: unknown destination
##  @POPPLER_DEST_XYZ: go to page with coordinates (left, top)
##  positioned at the upper-left corner of the window and the contents of
##  the page magnified by the factor zoom
##  @POPPLER_DEST_FIT: go to page with its contents magnified just
##  enough to fit the entire page within the window both horizontally and
##  vertically
##  @POPPLER_DEST_FITH: go to page with the vertical coordinate top
##  positioned at the top edge of the window and the contents of the page
##  magnified just enough to fit the entire width of the page within the window
##  @POPPLER_DEST_FITV: go to page with the horizontal coordinate
##  left positioned at the left edge of the window and the contents of the
##  page magnified just enough to fit the entire height of the page within the window
##  @POPPLER_DEST_FITR: go to page with its contents magnified just
##  enough to fit the rectangle specified by the coordinates left, bottom,
##  right, and top entirely within the window both horizontally and vertically
##  @POPPLER_DEST_FITB: go to page with its contents magnified just enough to fit
##  its bounding box entirely within the window both horizontally and vertically
##  @POPPLER_DEST_FITBH: go to page with the vertical
##  coordinate top positioned at the top edge of the window and the
##  contents of the page magnified just enough to fit the entire width of its
##  bounding box within the window
##  @POPPLER_DEST_FITBV: go to page with the horizontal
##  coordinate left positioned at the left edge of the window and the
##  contents of the page magnified just enough to fit the entire height of its
##  bounding box within the window
##  @POPPLER_DEST_NAMED: got to page specified by a name. See poppler_document_find_dest()
##
##  Destination types
##

type
  PopplerDestType* {.size: sizeof(cint).} = enum
    POPPLER_DEST_UNKNOWN, POPPLER_DEST_XYZ, POPPLER_DEST_FIT, POPPLER_DEST_FITH,
    POPPLER_DEST_FITV, POPPLER_DEST_FITR, POPPLER_DEST_FITB, POPPLER_DEST_FITBH,
    POPPLER_DEST_FITBV, POPPLER_DEST_NAMED


## *
##  PopplerActionMovieOperation:
##  @POPPLER_ACTION_MOVIE_PLAY: play movie
##  @POPPLER_ACTION_MOVIE_PAUSE: pause playing movie
##  @POPPLER_ACTION_MOVIE_RESUME: resume paused movie
##  @POPPLER_ACTION_MOVIE_STOP: stop playing movie
##
##  Movie operations
##
##  Since: 0.14
##

type
  PopplerActionMovieOperation* {.size: sizeof(cint).} = enum
    POPPLER_ACTION_MOVIE_PLAY, POPPLER_ACTION_MOVIE_PAUSE,
    POPPLER_ACTION_MOVIE_RESUME, POPPLER_ACTION_MOVIE_STOP


## *
##  PopplerActionLayerAction:
##  @POPPLER_ACTION_LAYER_ON: set layer visibility on
##  @POPPLER_ACTION_LAYER_OFF: set layer visibility off
##  @POPPLER_ACTION_LAYER_TOGGLE: reverse the layer visibility state
##
##  Layer actions
##
##  Since: 0.14
##

type
  PopplerActionLayerAction* {.size: sizeof(cint).} = enum
    POPPLER_ACTION_LAYER_ON, POPPLER_ACTION_LAYER_OFF, POPPLER_ACTION_LAYER_TOGGLE


##  Define the PopplerAction types

type
  PopplerActionAny* = popplerActionAny
  PopplerActionGotoDest* = popplerActionGotoDest
  PopplerActionGotoRemote* = popplerActionGotoRemote
  PopplerActionLaunch* = popplerActionLaunch
  PopplerActionUri* = popplerActionUri
  PopplerActionNamed* = popplerActionNamed
  PopplerActionMovie* = popplerActionMovie
  PopplerActionRendition* = popplerActionRendition
  PopplerActionOCGState* = popplerActionOCGState
  PopplerActionJavascript* = popplerActionJavascript
  PopplerActionResetForm* = popplerActionResetForm

## *
##  PopplerDest:
##  @type: type of destination
##  @page_num: page number
##  @left: left coordinate
##  @bottom: bottom coordinate
##  @right: right coordinate
##  @top: top coordinate
##  @zoom: scale factor
##  @named_dest: name of the destination (#POPPLER_DEST_NAMED only)
##  @change_left: whether left coordinate should be changed
##  @change_top: whether top coordinate should be changed
##  @change_zoom: whether scale factor should be changed
##
##  Data structure for holding a destination
##
##  Note that @named_dest is the string representation of the named
##  destination. This is the right form to pass to poppler functions,
##  e.g. poppler_document_find_dest(), but to get the destination as
##  it appears in the PDF itself, you need to convert it to a bytestring
##  with poppler_named_dest_to_bytestring() first.
##  Also note that @named_dest does not have a defined encoding and
##  is not in a form suitable to be displayed to the user.
##

type
  PopplerDest* {.importc: "_PopplerDest", header: "poppler-action.h", bycopy.} = object
    `type`* {.importc: "type".}: PopplerDestType
    pageNum* {.importc: "page_num".}: cint
    left* {.importc: "left".}: cdouble
    bottom* {.importc: "bottom".}: cdouble
    right* {.importc: "right".}: cdouble
    top* {.importc: "top".}: cdouble
    zoom* {.importc: "zoom".}: cdouble
    namedDest* {.importc: "named_dest".}: ptr Gchar
    changeLeft* {.importc: "change_left".} {.bitsize: 1.}: Guint
    changeTop* {.importc: "change_top".} {.bitsize: 1.}: Guint
    changeZoom* {.importc: "change_zoom".} {.bitsize: 1.}: Guint


## *
##  PopplerActionLayer:
##  @action: a #PopplerActionLayerAction
##  @layers: (element-type PopplerLayer): list of #PopplerLayer<!-- -->s
##
##  Action to perform over a list of layers
##

type
  PopplerActionLayer* {.importc: "_PopplerActionLayer", header: "poppler-action.h",
                       bycopy.} = object
    action* {.importc: "action".}: PopplerActionLayerAction
    layers* {.importc: "layers".}: ptr GList


## *
##  PopplerActionAny:
##  @type: action type
##  @title: action title
##
##  Fields common to all #PopplerAction<!-- -->s
##

type
  PopplerActionAny* {.importc: "_PopplerActionAny", header: "poppler-action.h",
                     bycopy.} = object
    `type`* {.importc: "type".}: PopplerActionType
    title* {.importc: "title".}: ptr Gchar


## *
##  PopplerActionGotoDest:
##  @type: action type (%POPPLER_ACTION_GOTO_DEST)
##  @title: action title
##  @dest: destination
##
##  Go to destination
##

type
  PopplerActionGotoDest* {.importc: "_PopplerActionGotoDest",
                          header: "poppler-action.h", bycopy.} = object
    `type`* {.importc: "type".}: PopplerActionType
    title* {.importc: "title".}: ptr Gchar
    dest* {.importc: "dest".}: ptr PopplerDest


## *
##  PopplerActionGotoRemote:
##  @type: action type (%POPPLER_ACTION_GOTO_REMOTE)
##  @title: action title
##  @file_name: file name
##  @dest: destination
##
##  Go to destination in another document
##

type
  PopplerActionGotoRemote* {.importc: "_PopplerActionGotoRemote",
                            header: "poppler-action.h", bycopy.} = object
    `type`* {.importc: "type".}: PopplerActionType
    title* {.importc: "title".}: ptr Gchar
    fileName* {.importc: "file_name".}: ptr Gchar
    dest* {.importc: "dest".}: ptr PopplerDest


## *
##  PopplerActionLaunch:
##  @type: action type (%POPPLER_ACTION_LAUNCH)
##  @title: action title
##  @file_name: file name
##  @params: parameters
##
##  Launch app (or open document)
##

type
  PopplerActionLaunch* {.importc: "_PopplerActionLaunch",
                        header: "poppler-action.h", bycopy.} = object
    `type`* {.importc: "type".}: PopplerActionType
    title* {.importc: "title".}: ptr Gchar
    fileName* {.importc: "file_name".}: ptr Gchar
    params* {.importc: "params".}: ptr Gchar


## *
##  PopplerActionUri:
##  @type: action type (%POPPLER_ACTION_URI)
##  @title: action title
##  @uri: URI
##
##  URI
##

type
  PopplerActionUri* {.importc: "_PopplerActionUri", header: "poppler-action.h",
                     bycopy.} = object
    `type`* {.importc: "type".}: PopplerActionType
    title* {.importc: "title".}: ptr Gchar
    uri* {.importc: "uri".}: cstring


## *
##  PopplerActionNamed:
##  @type: action type (%POPPLER_ACTION_NAMED)
##  @title: action title
##  @named_dest: named destination
##
##  Predefined action
##

type
  PopplerActionNamed* {.importc: "_PopplerActionNamed", header: "poppler-action.h",
                       bycopy.} = object
    `type`* {.importc: "type".}: PopplerActionType
    title* {.importc: "title".}: ptr Gchar
    namedDest* {.importc: "named_dest".}: ptr Gchar


## *
##  PopplerActionMovie:
##  @type: action type (%POPPLER_ACTION_MOVIE)
##  @title: action title
##  @operation: operation
##  @movie: movie
##
##  Play movies.
##
##  Since: 0.14
##

type
  PopplerActionMovie* {.importc: "_PopplerActionMovie", header: "poppler-action.h",
                       bycopy.} = object
    `type`* {.importc: "type".}: PopplerActionType
    title* {.importc: "title".}: ptr Gchar
    operation* {.importc: "operation".}: PopplerActionMovieOperation
    movie* {.importc: "movie".}: ptr PopplerMovie


## *
##  PopplerActionRendition:
##  @type: action type (%POPPLER_ACTION_RENDITION)
##  @title: action title
##  @op: operation
##  @media: media
##
##  Play multimedia content.
##
##  Since: 0.14
##

type
  PopplerActionRendition* {.importc: "_PopplerActionRendition",
                           header: "poppler-action.h", bycopy.} = object
    `type`* {.importc: "type".}: PopplerActionType
    title* {.importc: "title".}: ptr Gchar
    op* {.importc: "op".}: Gint
    media* {.importc: "media".}: ptr PopplerMedia


## *
##  PopplerActionOCGState:
##  @type: action type (%POPPLER_ACTION_OCG_STATE)
##  @title: action title
##  @state_list: (element-type PopplerActionLayer): list of #PopplerActionLayer<!-- -->s
##
##  State of layer.
##
##  Since: 0.14
##

type
  PopplerActionOCGState* {.importc: "_PopplerActionOCGState",
                          header: "poppler-action.h", bycopy.} = object
    `type`* {.importc: "type".}: PopplerActionType
    title* {.importc: "title".}: ptr Gchar
    stateList* {.importc: "state_list".}: ptr GList


## *
##  PopplerActionJavascript:
##  @type: action type (%POPPLER_ACTION_JAVASCRIPT)
##  @title: action title
##  @script: javascript
##
##  Javascript.
##
##  Since: 0.18
##

type
  PopplerActionJavascript* {.importc: "_PopplerActionJavascript",
                            header: "poppler-action.h", bycopy.} = object
    `type`* {.importc: "type".}: PopplerActionType
    title* {.importc: "title".}: ptr Gchar
    script* {.importc: "script".}: ptr Gchar


## *
##  PopplerActionResetForm:
##  @type: action type (%POPPLER_ACTION_RESET_FORM)
##  @title: action title
##  @fields: (element-type utf8) (nullable): list of field names to
##    reset / retain
##  @exclude: whether to reset all but the listed fields
##
##  Resets some or all fields within a PDF form.
##
##  The default behavior resets only the list of @fields, but setting
##  @exclude to %TRUE will cause the action to reset all fields but those
##  listed. Providing an empty list of fields resets the entire form.
##
##  Since: 0.90
##

type
  PopplerActionResetForm* {.importc: "_PopplerActionResetForm",
                           header: "poppler-action.h", bycopy.} = object
    `type`* {.importc: "type".}: PopplerActionType
    title* {.importc: "title".}: ptr Gchar
    fields* {.importc: "fields".}: ptr GList
    exclude* {.importc: "exclude".}: Gboolean


## *
##  PopplerAction:
##
##  A generic wrapper for actions that exposes only #PopplerActionType.
##

type
  PopplerAction* {.importc: "_PopplerAction", header: "poppler-action.h", bycopy,
                  union.} = object
    `type`* {.importc: "type".}: PopplerActionType
    any* {.importc: "any".}: PopplerActionAny
    gotoDest* {.importc: "goto_dest".}: PopplerActionGotoDest
    gotoRemote* {.importc: "goto_remote".}: PopplerActionGotoRemote
    launch* {.importc: "launch".}: PopplerActionLaunch
    uri* {.importc: "uri".}: PopplerActionUri
    named* {.importc: "named".}: PopplerActionNamed
    movie* {.importc: "movie".}: PopplerActionMovie
    rendition* {.importc: "rendition".}: PopplerActionRendition
    ocgState* {.importc: "ocg_state".}: PopplerActionOCGState
    javascript* {.importc: "javascript".}: PopplerActionJavascript
    resetForm* {.importc: "reset_form".}: PopplerActionResetForm


##  #define POPPLER_TYPE_ACTION (poppler_action_get_type())
##  #define POPPLER_ACTION(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), POPPLER_TYPE_ACTION, PopplerAction))

proc popplerActionGetType*(): GType {.cdecl, importc: "poppler_action_get_type",
                                   header: "poppler-action.h".}
proc popplerActionFree*(action: ptr PopplerAction) {.cdecl,
    importc: "poppler_action_free", header: "poppler-action.h".}
proc popplerActionCopy*(action: ptr PopplerAction): ptr PopplerAction {.cdecl,
    importc: "poppler_action_copy", header: "poppler-action.h".}
const
  POPPLER_TYPE_DEST* = (popplerDestGetType())

proc popplerDestGetType*(): GType {.cdecl, importc: "poppler_dest_get_type",
                                 header: "poppler-action.h".}
proc popplerDestFree*(dest: ptr PopplerDest) {.cdecl, importc: "poppler_dest_free",
    header: "poppler-action.h".}
proc popplerDestCopy*(dest: ptr PopplerDest): ptr PopplerDest {.cdecl,
    importc: "poppler_dest_copy", header: "poppler-action.h".}
proc popplerNamedDestFromBytestring*(data: ptr Guint8; length: Gsize): cstring {.cdecl,
    importc: "poppler_named_dest_from_bytestring", header: "poppler-action.h".}
proc popplerNamedDestToBytestring*(name: cstring; length: ptr Gsize): ptr Guint8 {.
    cdecl, importc: "poppler_named_dest_to_bytestring", header: "poppler-action.h".}